@model ReadLater5.Models.UpsertBookmarkModel

@{
    ViewBag.Title = "Edit";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Bookmark</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @for (int i = 0; i < Model.PossibleCategories.Count(); i++)
        {
            @Html.HiddenFor(model => model.PossibleCategories[i].ID)
            @Html.HiddenFor(model => model.PossibleCategories[i].Name)
        }
        <div class="row form-group">
            @Html.LabelFor(model => model.URL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.URL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.URL, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-group">
            @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-group" id="ExistingCategorySection">
            @Html.LabelFor(model => model.Categories, htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-3">
                <div class="dropdown mt-2">
                    <div class="container-select">
                        @Html.DropDownListFor(m => m.CategoryId, Model.Categories, "-- Select One --", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <button class="btn btn-primary btn-sm mt-2" type="button" onclick="toggleNewCategory()">Create new category</button>
            </div>
        </div>
        <div class="row form-group d-none" id="NewCategorySection">
            @Html.LabelFor(model => model.CategoryName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.CategoryName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                <button class="btn btn-primary btn-sm mt-2" type="button" onclick="toggleNewCategory()">Choose existing category</button>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    function toggleNewCategory() {
        $('#CategoryId').val(null).change();
        $('#CategoryName').val(null);
        $("#ExistingCategorySection").toggleClass('d-none');
        $("#NewCategorySection").toggleClass('d-none');
    }
</script>